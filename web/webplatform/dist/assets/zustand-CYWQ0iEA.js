import{e as N}from"./react-BA7A5rMr.js";import{u as O}from"./use-sync-external-store-B14h5KzQ.js";import{p as H}from"./immer-DBy2mM9c.js";(function(){try{var t=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},i=new t.Error().stack;i&&(t._sentryDebugIds=t._sentryDebugIds||{},t._sentryDebugIds[i]="3eae1eea-aba5-4b0b-a9e2-90fb75e62009",t._sentryDebugIdIdentifier="sentry-dbid-3eae1eea-aba5-4b0b-a9e2-90fb75e62009")}catch{}})();const w={BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SENTRY_AUTH_TOKEN:void 0,SENTRY_DSN:void 0,SSR:!1,TESTS_JWT_AUTH_TOKEN:void 0,VITE_AUTH_ENABLED:void 0,VITE_DESCOPE_PROJECT_ID:void 0,VITE_HOST_URL:void 0,VITE_NODE_ENV:void 0},y=t=>{let i;const o=new Set,r=(S,g)=>{const E=typeof S=="function"?S(i):S;if(!Object.is(E,i)){const v=i;i=g??(typeof E!="object"||E===null)?E:Object.assign({},i,E),o.forEach(h=>h(i,v))}},a=()=>i,_={setState:r,getState:a,getInitialState:()=>u,subscribe:S=>(o.add(S),()=>o.delete(S)),destroy:()=>{(w?"production":void 0)!=="production"&&console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."),o.clear()}},u=i=t(r,a,_);return _},A=t=>t?y(t):y,I={BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SENTRY_AUTH_TOKEN:void 0,SENTRY_DSN:void 0,SSR:!1,TESTS_JWT_AUTH_TOKEN:void 0,VITE_AUTH_ENABLED:void 0,VITE_DESCOPE_PROJECT_ID:void 0,VITE_HOST_URL:void 0,VITE_NODE_ENV:void 0},{useDebugValue:U}=N,{useSyncExternalStoreWithSelector:P}=O;let T=!1;const L=t=>t;function C(t,i=L,o){(I?"production":void 0)!=="production"&&o&&!T&&(console.warn("[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"),T=!0);const r=P(t.subscribe,t.getState,t.getServerState||t.getInitialState,i,o);return U(r),r}const b=t=>{(I?"production":void 0)!=="production"&&typeof t!="function"&&console.warn("[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.");const i=typeof t=="function"?A(t):t,o=(r,a)=>C(i,r,a);return Object.assign(o,i),o},j=t=>t?b(t):b,J={BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SENTRY_AUTH_TOKEN:void 0,SENTRY_DSN:void 0,SSR:!1,TESTS_JWT_AUTH_TOKEN:void 0,VITE_AUTH_ENABLED:void 0,VITE_DESCOPE_PROJECT_ID:void 0,VITE_HOST_URL:void 0,VITE_NODE_ENV:void 0};function z(t,i){let o;try{o=t()}catch{return}return{getItem:a=>{var e;const f=_=>_===null?null:JSON.parse(_,void 0),l=(e=o.getItem(a))!=null?e:null;return l instanceof Promise?l.then(f):f(l)},setItem:(a,e)=>o.setItem(a,JSON.stringify(e,void 0)),removeItem:a=>o.removeItem(a)}}const p=t=>i=>{try{const o=t(i);return o instanceof Promise?o:{then(r){return p(r)(o)},catch(r){return this}}}catch(o){return{then(r){return this},catch(r){return p(r)(o)}}}},V=(t,i)=>(o,r,a)=>{let e={getStorage:()=>localStorage,serialize:JSON.stringify,deserialize:JSON.parse,partialize:s=>s,version:0,merge:(s,c)=>({...c,...s}),...i},f=!1;const l=new Set,_=new Set;let u;try{u=e.getStorage()}catch{}if(!u)return t((...s)=>{console.warn(`[zustand persist middleware] Unable to update item '${e.name}', the given storage is currently unavailable.`),o(...s)},r,a);const S=p(e.serialize),g=()=>{const s=e.partialize({...r()});let c;const n=S({state:s,version:e.version}).then(m=>u.setItem(e.name,m)).catch(m=>{c=m});if(c)throw c;return n},E=a.setState;a.setState=(s,c)=>{E(s,c),g()};const v=t((...s)=>{o(...s),g()},r,a);let h;const d=()=>{var s;if(!u)return;f=!1,l.forEach(n=>n(r()));const c=((s=e.onRehydrateStorage)==null?void 0:s.call(e,r()))||void 0;return p(u.getItem.bind(u))(e.name).then(n=>{if(n)return e.deserialize(n)}).then(n=>{if(n)if(typeof n.version=="number"&&n.version!==e.version){if(e.migrate)return e.migrate(n.state,n.version);console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}else return n.state}).then(n=>{var m;return h=e.merge(n,(m=r())!=null?m:v),o(h,!0),g()}).then(()=>{c==null||c(h,void 0),f=!0,_.forEach(n=>n(h))}).catch(n=>{c==null||c(void 0,n)})};return a.persist={setOptions:s=>{e={...e,...s},s.getStorage&&(u=s.getStorage())},clearStorage:()=>{u==null||u.removeItem(e.name)},getOptions:()=>e,rehydrate:()=>d(),hasHydrated:()=>f,onHydrate:s=>(l.add(s),()=>{l.delete(s)}),onFinishHydration:s=>(_.add(s),()=>{_.delete(s)})},d(),h||v},B=(t,i)=>(o,r,a)=>{let e={storage:z(()=>localStorage),partialize:d=>d,version:0,merge:(d,s)=>({...s,...d}),...i},f=!1;const l=new Set,_=new Set;let u=e.storage;if(!u)return t((...d)=>{console.warn(`[zustand persist middleware] Unable to update item '${e.name}', the given storage is currently unavailable.`),o(...d)},r,a);const S=()=>{const d=e.partialize({...r()});return u.setItem(e.name,{state:d,version:e.version})},g=a.setState;a.setState=(d,s)=>{g(d,s),S()};const E=t((...d)=>{o(...d),S()},r,a);a.getInitialState=()=>E;let v;const h=()=>{var d,s;if(!u)return;f=!1,l.forEach(n=>{var m;return n((m=r())!=null?m:E)});const c=((s=e.onRehydrateStorage)==null?void 0:s.call(e,(d=r())!=null?d:E))||void 0;return p(u.getItem.bind(u))(e.name).then(n=>{if(n)if(typeof n.version=="number"&&n.version!==e.version){if(e.migrate)return[!0,e.migrate(n.state,n.version)];console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}else return[!1,n.state];return[!1,void 0]}).then(n=>{var m;const[D,R]=n;if(v=e.merge(R,(m=r())!=null?m:E),o(v,!0),D)return S()}).then(()=>{c==null||c(v,void 0),v=r(),f=!0,_.forEach(n=>n(v))}).catch(n=>{c==null||c(void 0,n)})};return a.persist={setOptions:d=>{e={...e,...d},d.storage&&(u=d.storage)},clearStorage:()=>{u==null||u.removeItem(e.name)},getOptions:()=>e,rehydrate:()=>h(),hasHydrated:()=>f,onHydrate:d=>(l.add(d),()=>{l.delete(d)}),onFinishHydration:d=>(_.add(d),()=>{_.delete(d)})},e.skipHydration||h(),v||E},F=(t,i)=>"getStorage"in i||"serialize"in i||"deserialize"in i?((J?"production":void 0)!=="production"&&console.warn("[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead."),V(t,i)):B(t,i),k=F,W=t=>(i,o,r)=>(r.setState=(a,e,...f)=>{const l=typeof a=="function"?H(a):a;return i(l,e,...f)},t(r.setState,o,r)),$=W;export{j as c,$ as i,k as p};
