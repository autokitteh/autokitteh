# Negative tests: empty connections list, with/out --fail flag.
ak connection list
return code == 0
output equals ''

ak connection list --fail
output equals 'Error: connections not found'
return code == 10

# Precondition: create project.
ak project create --name my_project
return code == 0
output equals 'project_id: prj_00000000000000000000000001'

ak connection list
return code == 0
output regex 'connection_id:"con_3kthcr0n000000000000000000" +name:"cron"'

# delete cron connection
ak connection delete con_3kthcr0n000000000000000000
return code == 0

# Preconditions: create connections.
ak connection create my_connection_1 --project my_project --integration http -q
return code == 0
output equals 'connection_id: con_00000000000000000000000003'

ak connection create my_connection_2 --project my_project --integration http -q
return code == 0
output equals 'connection_id: con_00000000000000000000000004'

# List all connections, with/out JSON.
ak connection list
return code == 0
output contains 'connection_id:"con_00000000000000000000000003"'
output contains 'connection_id:"con_00000000000000000000000004"'

ak connection list -j
return code == 0
output equals file expected_all_unformatted.json

# List all connections after filtering.
ak connection list --integration http -J
return code == 0
output equals file expected_all_formatted.json

# List no connections after filtering.
ak connection list --integration github -J
return code == 0
output equals ''

ak connection list --integration meow -J
return code == 0
output equals ''

ak connection list -f --integration meow -J 
return code == 10
output equals 'Error: integration not found'

-- expected_all_unformatted.json --
{"connection_id":"con_00000000000000000000000003","integration_id":"int_3kth00httpf1201a7ed83f7cd5","project_id":"prj_00000000000000000000000001","name":"my_connection_1","status":{},"capabilities":{"supports_connection_init":true},"links":{"init_url":"/connections/con_00000000000000000000000003/init","self_url":"/connections/con_00000000000000000000000003"}}
{"connection_id":"con_00000000000000000000000004","integration_id":"int_3kth00httpf1201a7ed83f7cd5","project_id":"prj_00000000000000000000000001","name":"my_connection_2","status":{},"capabilities":{"supports_connection_init":true},"links":{"init_url":"/connections/con_00000000000000000000000004/init","self_url":"/connections/con_00000000000000000000000004"}}

-- expected_all_formatted.json --
{
  "connection_id": "con_00000000000000000000000003",
  "integration_id": "int_3kth00httpf1201a7ed83f7cd5",
  "project_id": "prj_00000000000000000000000001",
  "name": "my_connection_1",
  "status": {},
  "capabilities": {
    "supports_connection_init": true
  },
  "links": {
    "init_url": "/connections/con_00000000000000000000000003/init",
    "self_url": "/connections/con_00000000000000000000000003"
  }
}
{
  "connection_id": "con_00000000000000000000000004",
  "integration_id": "int_3kth00httpf1201a7ed83f7cd5",
  "project_id": "prj_00000000000000000000000001",
  "name": "my_connection_2",
  "status": {},
  "capabilities": {
    "supports_connection_init": true
  },
  "links": {
    "init_url": "/connections/con_00000000000000000000000004/init",
    "self_url": "/connections/con_00000000000000000000000004"
  }
}
