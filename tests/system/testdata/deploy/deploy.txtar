# Negative test: deploy nonexistent manifest file.
ak deploy --manifest bad_filename.yaml
output equals 'Error: open bad_filename.yaml: no such file or directory'
return code == $RC_NOT_FOUND

# Negative tests: deploy nonexistent project, by name/ID.
ak deploy --project bad_project --file program.star
output equals 'Error: project: not_found'
return code == $RC_NOT_FOUND

# Deploy based on new manifest.
ak deploy --manifest my_project/manifest.yaml
return code == 0
output equals file expected_output_1.txt

# Redeploy the same manifest.
ak deploy --manifest my_project/manifest.yaml
return code == 0
output equals file expected_output_2.txt

# Negative test: deploy project with nonexistent files and directories.
ak deploy --project my_project --file bad_filename
output contains 'Error: stat bad_filename: no such file or directory'
return code == $RC_NOT_FOUND

ak deploy --project my_project --dir bad_dir_name
output contains 'Error: stat bad_dir_name: no such file or directory'
return code == $RC_NOT_FOUND

# Deploy project from a single file.
ak deploy --project my_project --file single_file.star
return code == 0
output equals file expected_output_3.txt

# Deploy project from a directory tree with multiple files.
ak deploy --project my_project --dir directory
return code == 0
output equals file expected_output_4.txt

# Deploy project from both, alongside each other.
ak deploy --project my_project --file single_file.star --dir directory
return code == 0
output equals file expected_output_5.txt

-- my_project/manifest.yaml --
version: v1

project:
  name: my_project
  triggers:
    - name: get
      type: webhook
      event_type: get
      call: my_program.star:on_http_get

-- expected_output_1.txt --
[plan] project "my_project": not found, will create
[plan] trigger "my_project:/get": not found, will create
[exec] create_project "my_project": prj_00000000000000000000000001 created
[exec] create_trigger "my_project:/get": trg_00000000000000000000000002 created
[!!!!] trigger "get" created, webhook path is "/webhooks/00000000000000000000000003"
[plan] project "prj_00000000000000000000000001": found, id="prj_00000000000000000000000001"
[exec] create_build: created "bld_00000000000000000000000004"
[exec] create_deployment: created "dep_00000000000000000000000005"
[exec] activate_deployment: activated

-- expected_output_2.txt --
[plan] project "my_project": found, id="prj_00000000000000000000000001"
[plan] project "my_project": no changes needed
[plan] project "my_project": found 0 connections
[plan] project "my_project": found 1 triggers
[plan] trigger "my_project:/get": found, id="trg_00000000000000000000000002"
[plan] trigger "my_project:/get": no changes needed
[plan] project "my_project": found, id="prj_00000000000000000000000001"
[exec] create_build: created "bld_00000000000000000000000006"
[exec] create_deployment: created "dep_00000000000000000000000007"
[exec] activate_deployment: activated

-- single_file.star --
print("single_file.star")

-- directory/file1.star --
print("directory/file1.star")

-- directory/subdirectory/file1.star --
print("directory/subdirectory/file1.star")

-- directory/subdirectory/file2.star --
print("directory/subdirectory/file2.star")

-- expected_output_3.txt --
[plan] project "my_project": found, id="prj_00000000000000000000000001"
[exec] create_build: created "bld_00000000000000000000000008"
[exec] create_deployment: created "dep_00000000000000000000000009"
[exec] activate_deployment: activated

-- expected_output_4.txt --
[plan] project "my_project": found, id="prj_00000000000000000000000001"
[exec] create_build: created "bld_0000000000000000000000000a"
[exec] create_deployment: created "dep_0000000000000000000000000b"
[exec] activate_deployment: activated

-- expected_output_5.txt --
[plan] project "my_project": found, id="prj_00000000000000000000000001"
[exec] create_build: created "bld_0000000000000000000000000c"
[exec] create_deployment: created "dep_0000000000000000000000000d"
[exec] activate_deployment: activated
