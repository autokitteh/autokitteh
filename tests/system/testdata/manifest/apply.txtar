# Graceful handling of a nonexistent manifest file.
ak manifest apply nonexistent.yaml
output equals 'Error: open nonexistent.yaml: no such file or directory'
return code == 1

# Graceful handling of an invalid manifest file.
ak manifest apply invalid.yaml
output equals file invalid_error.txt
return code == 1

# Successful application of an empty plan.
ak manifest apply empty.yaml
return code == 0
output equals ''

# Successful dry run of a full project.
ak manifest apply full.yaml --dry-run -J
return code == 0
output equals file expected_on_full_dry_run.json

# Successful application of a full project.
ak manifest apply full.yaml -J
return code == 0
output equals file expected_on_full_apply.json

# Check the actual project details.
ak project get my_project -J
return code == 0
output equals file expected_project_details.json

ak project get p:00000000000000000000000000000001 -J
return code == 0
output equals file expected_project_details.json

# Check the actual connection details.
ak connection get my_project/my_connection -J
return code == 0
output equals file expected_connection_details.json

# TODO: Add more tests - either here, or in separate `.txtar` files:  
# - Specifying an env name  
# - This command's flags  
# - Other manifest commands since PR #6  
ak connection get connection:00000000000000000000000000000003 -J
return code == 0
output equals file expected_connection_details.json

# Check the actual environment details.
ak env get my_project/default -J
return code == 0
output equals file expected_env_details.json

ak env get e:00000000000000000000000000000002 -J
return code == 0
output equals file expected_env_details.json

# Check the actual trigger details.
ak trigger get t:00000000000000000000000000000004 -J
return code == 0
output equals file expected_trigger_details.json

-- invalid.yaml --
This is an invalid YAML file to trigger an error

-- invalid_error.txt --
Error: invalid YAML input: yaml: unmarshal errors:
  line 1: cannot unmarshal !!str `This is...` into manifest.Manifest

-- empty.yaml --
version: v1

-- full.yaml --
version: v1

project:
  name: my_project
  connections:
    - name: my_connection
      integration: http
      token: my_path
  triggers:
    - connection: my_connection
      event_type: get
      entrypoint: my_program.star:on_http_get

-- expected_on_full_dry_run.json --
[plan] project "my_project": not found, will create
[plan] env "my_project/default": not found, will create
[plan] connection "my_project/my_connection": not found, will create
[plan] trigger "my_project/default:my_project/my_connection/get": not found, will create

-- expected_on_full_apply.json --
[plan] project "my_project": not found, will create
[plan] env "my_project/default": not found, will create
[plan] connection "my_project/my_connection": not found, will create
[plan] trigger "my_project/default:my_project/my_connection/get": not found, will create
[exec] create_project "my_project": created "p:00000000000000000000000000000001"
[exec] create_env "my_project/default": created "e:00000000000000000000000000000002"
[exec] create_connection "my_project/my_connection": created "connection:00000000000000000000000000000003"
[exec] create_trigger "my_project/default:my_project/my_connection/get": created "t:00000000000000000000000000000004"

-- expected_project_details.json --
{
  "project": {
    "project_id": "p:00000000000000000000000000000001",
    "name": "my_project"
  }
}

-- expected_connection_details.json --
{
  "connection": {
    "connection_id": "connection:00000000000000000000000000000003",
    "integration_id": "integration:8000000000000000f1201a7ed83f7cd5",
    "integration_token": "my_path",
    "project_id": "p:00000000000000000000000000000001",
    "name": "my_connection"
  }
}

-- expected_env_details.json --
{
  "env": {
    "env_id": "e:00000000000000000000000000000002",
    "project_id": "p:00000000000000000000000000000001",
    "name": "default"
  }
}

-- expected_trigger_details.json --
{
  "trigger": {
    "trigger_id": "t:00000000000000000000000000000004",
    "connection_id": "connection:00000000000000000000000000000003",
    "env_id": "e:00000000000000000000000000000002",
    "event_type": "get",
    "code_location": {
      "path": "my_program.star",
      "name": "on_http_get"
    }
  }
}
