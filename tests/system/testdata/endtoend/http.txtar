ak manifest apply project.yaml
return code == 0

ak project build myproject --from main.star
return code == 0
output equals 'build_id: bld_00000000000000000000000006'

ak deployment create --build-id=bld_00000000000000000000000006 --env=myproject/default --activate
return code == 0

http get /http/myproject/meow
resp code == 200

wait 10s for session ses_00000000000000000000000009

ak sessions log --no-timestamps --skip -1 -J
return code == 0
output equals_json file get_meow.json

http post /http/myproject/test/aaa/bbb/ccc
resp code == 200

wait 10s for session ses_0000000000000000000000000c

ak sessions log --no-timestamps --skip -1 -J
return code == 0
output equals_json file get_test.json

-- project.yaml --
version: v1

project:
  name: myproject
  connections:
    - name: myhttp
      integration: http
  triggers:
    - name: get
      connection: myhttp
      event_type: get
      entrypoint: main.star:on_http
    - name: test
      connection: myhttp
      entrypoint: main.star:on_http
      data:
        path: "/test/{a}/{b...}"

-- main.star --
def on_http(data, trigger, event):
    print(data)
    print(event)
    print(trigger)

-- get_meow.json --
{
    "state": {
        "completed": {
            "prints": [
                "data(body = body(bytes = \u003cbuilt-in function .bytes\u003e, form = \u003cbuilt-in function .form\u003e, json = \u003cbuilt-in function .json\u003e, text = \u003cbuilt-in function .text\u003e), header = {\"Accept-Encoding\": \"gzip\", \"User-Agent\": \"Go-http-client/1.1\"}, method = \"GET\", url = url(fragment = \"\", host = \"\", opaque = \"\", path = \"/meow\", query = {}, raw = \"\", raw_fragment = \"\", raw_query = \"\", scheme = \"\"))",
                "event(data = event_data(body = body(bytes = \u003cbuilt-in function .bytes\u003e, form = \u003cbuilt-in function .form\u003e, json = \u003cbuilt-in function .json\u003e, text = \u003cbuilt-in function .text\u003e), header = {\"Accept-Encoding\": \"gzip\", \"User-Agent\": \"Go-http-client/1.1\"}, method = \"GET\", url = url(fragment = \"\", host = \"\", opaque = \"\", path = \"/meow\", query = {}, raw = \"\", raw_fragment = \"\", raw_query = \"\", scheme = \"\")), id = \"evt_00000000000000000000000008\", integration_id = \"int_0000000000f1201a7ed83f7cd5\", type = \"get\")",
                "trigger(data = event_data(), name = \"get\")"
            ],
            "exports": {
                "on_http": {
                    "function": {
                        "executor_id": "run_0000000000000000000000000a",
                        "name": "on_http",
                        "desc": {
                            "input": [
                                {
                                    "name": "data"
                                },
                                {
                                    "name": "trigger"
                                },
                                {
                                    "name": "event"
                                }
                            ]
                        },
                        "data": "b25faHR0cCMx"
                    }
                }
            },
            "return_value": {
                "nothing": {}
            }
        }
    }
}

-- get_test.json --
{
    "state": {
        "completed": {
            "prints": [
                "data(body = body(bytes = \u003cbuilt-in function .bytes\u003e, form = \u003cbuilt-in function .form\u003e, json = \u003cbuilt-in function .json\u003e, text = \u003cbuilt-in function .text\u003e), header = {\"Accept-Encoding\": \"gzip\", \"User-Agent\": \"Go-http-client/1.1\", \"Content-Length\": \"0\"}, method = \"POST\", params = {\"a\": \"aaa\", \"b\": \"bbb/ccc\"}, path = \"/test/{a}/{b...}\", url = url(fragment = \"\", host = \"\", opaque = \"\", path = \"/test/aaa/bbb/ccc\", query = {}, raw = \"\", raw_fragment = \"\", raw_query = \"\", scheme = \"\"))",
                "event(data = event_data(body = body(bytes = \u003cbuilt-in function .bytes\u003e, form = \u003cbuilt-in function .form\u003e, json = \u003cbuilt-in function .json\u003e, text = \u003cbuilt-in function .text\u003e), header = {\"Accept-Encoding\": \"gzip\", \"User-Agent\": \"Go-http-client/1.1\", \"Content-Length\": \"0\"}, method = \"POST\", url = url(fragment = \"\", host = \"\", opaque = \"\", path = \"/test/aaa/bbb/ccc\", query = {}, raw = \"\", raw_fragment = \"\", raw_query = \"\", scheme = \"\")), id = \"evt_0000000000000000000000000b\", integration_id = \"int_0000000000f1201a7ed83f7cd5\", type = \"post\")",
                "trigger(data = data(params = {\"a\": \"aaa\", \"b\": \"bbb/ccc\"}, path = \"/test/{a}/{b...}\"), name = \"test\")"
            ],
            "exports": {
                "on_http": {
                    "function": {
                        "executor_id": "run_0000000000000000000000000d",
                        "name": "on_http",
                        "desc": {
                            "input": [
                                {
                                    "name": "data"
                                },
                                {
                                    "name": "trigger"
                                },
                                {
                                    "name": "event"
                                }
                            ]
                        },
                        "data": "b25faHR0cCMx"
                    }
                }
            },
            "return_value": {
                "nothing": {}
            }
        }
    }
}
