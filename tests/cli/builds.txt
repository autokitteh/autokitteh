$ tmp=$(mktemp -d)
$ build_file_path=${tmp}/build.akb
$ ${AK} runtime build --dir examples/testprograms/multi -o ${build_file_path}
$ # List builds return empty list
$ ${AK} build list; echo $?
0
$ # get build return none if id not found
$ ${AK} build get bld_00000000000000000000000001; echo $?
0
$ # get build fails if id not found and failure is requested
$ ${AK} build get bld_00000000000000000000000001 -f; echo $?
Error: build not found
10
$ echo hissss > ${tmp}/hissss
$ ${AK} build upload ${tmp}/hissss; echo $?
Error: save build: read version: gzip: unexpected EOF
1
$ # upload build without build_file_path fail
$ ${AK} build upload; echo $?
Error: accepts 1 arg(s), received 0
1
$ # upload build with invalid data file fail
$ ${AK} build upload not_existing.txt; echo $?
Error: read file: open not_existing.txt: no such file or directory
1
$ # upload build return build_id
$ ${AK} -j build upload ${build_file_path}; echo $?
{"build_id":"bld_00000000000000000000000001"}
0
$ # get build
$ ${AK} -j build get bld_00000000000000000000000001; echo $? #=> --regex {"build":\{"build_id":"bld_00000000000000000000000001","created_at":".*}}
$ # list builds
$ # describe build
$ ${AK} -J build describe bld_00000000000000000000000001; echo $?
{
  "build": {
    "info": {},
    "runtimes": [
      {
        "info": {
          "name": "config"
        },
        "artifact": {
          "exports": [
            {
              "symbol": "text"
            },
            {
              "symbol": "text"
            }
          ],
          "compiled_data": {
            "poem1.txt": "",
            "poem2.txt": ""
          }
        }
      },
      {
        "info": {
          "name": "starlark"
        },
        "artifact": {
          "requirements": [
            {
              "location": {
                "path": "main.star",
                "row": 3,
                "col": 6
              },
              "url": "poem1.txt"
            },
            {
              "location": {
                "path": "main.star",
                "row": 4,
                "col": 6
              },
              "url": "poem2.txt"
            }
          ],
          "exports": [
            {
              "location": {
                "path": "cats.star",
                "row": 1,
                "col": 1
              },
              "symbol": "cats"
            },
            {
              "location": {
                "path": "cats.star",
                "row": 2,
                "col": 1
              },
              "symbol": "vocalization"
            },
            {
              "location": {
                "path": "dogs.star",
                "row": 1,
                "col": 1
              },
              "symbol": "dogs"
            },
            {
              "location": {
                "path": "dogs.star",
                "row": 2,
                "col": 1
              },
              "symbol": "vocalization"
            },
            {
              "location": {
                "path": "main.star",
                "row": 6,
                "col": 1
              },
              "symbol": "num_cats"
            },
            {
              "location": {
                "path": "main.star",
                "row": 7,
                "col": 1
              },
              "symbol": "num_dogs"
            }
          ],
          "compiled_data": {
            "cats.star": "",
            "dogs.star": "",
            "main.star": ""
          }
        }
      }
    ],
    "runtime_requirements": []
  }
}
0
$ ${AK} -j build ls ; echo $? #=> --regex {"build_id":"bld_0000000000000000000000000[1-9]","created_at":".*}
$ # upload another build return build_id
$ ${AK} -j build upload ${build_file_path}; echo $?
{"build_id":"bld_00000000000000000000000002"}
0
$ # list builds returns 2 builds and empty line
$ ${AK} -j build ls ; echo $? #=> --lines 3
$ # delete build 1
$ ${AK} -j build delete bld_00000000000000000000000002; echo $?
0
$ # list builds returns 1 build and empty line
$ ${AK} -j build ls ; echo $? #=> --lines 2
$ # get build 1 return nothing
$ ${AK} -j build get bld_00000000000000000000000002; echo $?
{"build":null}
0
$ # get build 1 still works
$ ${AK} -j build get bld_00000000000000000000000001; echo $? #=> --regex {"build":\{"build_id":"bld_00000000000000000000000001","created_at":".*}}
$ # download build 1
$ ${AK} -j build download bld_00000000000000000000000001 --output - > ${tmp}/got; echo $? 
0
$ cmp ${tmp}/got ${build_file_path}; echo $?
0
$ # download to file
$ ${AK} -j build download bld_00000000000000000000000001 -o ${tmp}/build.file; echo $? 
0
$ cmp ${tmp}/build.file ${build_file_path}; echo $?
0
