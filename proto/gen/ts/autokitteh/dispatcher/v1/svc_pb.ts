// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file autokitteh/dispatcher/v1/svc.proto (package autokitteh.dispatcher.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Event } from "../../events/v1/event_pb.js";

/**
 * @generated from message autokitteh.dispatcher.v1.DispatchRequest
 */
export class DispatchRequest extends Message<DispatchRequest> {
  /**
   * @generated from field: autokitteh.events.v1.Event event = 1;
   */
  event?: Event;

  /**
   * @generated from field: string deployment_id = 2;
   */
  deploymentId = "";

  /**
   * either project id or name.
   *
   * @generated from field: string project = 3;
   */
  project = "";

  constructor(data?: PartialMessage<DispatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.dispatcher.v1.DispatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: Event },
    { no: 2, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DispatchRequest {
    return new DispatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DispatchRequest {
    return new DispatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DispatchRequest {
    return new DispatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DispatchRequest | PlainMessage<DispatchRequest> | undefined, b: DispatchRequest | PlainMessage<DispatchRequest> | undefined): boolean {
    return proto3.util.equals(DispatchRequest, a, b);
  }
}

/**
 * @generated from message autokitteh.dispatcher.v1.DispatchResponse
 */
export class DispatchResponse extends Message<DispatchResponse> {
  /**
   * @generated from field: string event_id = 1;
   */
  eventId = "";

  constructor(data?: PartialMessage<DispatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.dispatcher.v1.DispatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DispatchResponse {
    return new DispatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DispatchResponse {
    return new DispatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DispatchResponse {
    return new DispatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DispatchResponse | PlainMessage<DispatchResponse> | undefined, b: DispatchResponse | PlainMessage<DispatchResponse> | undefined): boolean {
    return proto3.util.equals(DispatchResponse, a, b);
  }
}

/**
 * @generated from message autokitteh.dispatcher.v1.RedispatchRequest
 */
export class RedispatchRequest extends Message<RedispatchRequest> {
  /**
   * @generated from field: string event_id = 1;
   */
  eventId = "";

  /**
   * @generated from field: string deployment_id = 3;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<RedispatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.dispatcher.v1.RedispatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedispatchRequest {
    return new RedispatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedispatchRequest {
    return new RedispatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedispatchRequest {
    return new RedispatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RedispatchRequest | PlainMessage<RedispatchRequest> | undefined, b: RedispatchRequest | PlainMessage<RedispatchRequest> | undefined): boolean {
    return proto3.util.equals(RedispatchRequest, a, b);
  }
}

/**
 * @generated from message autokitteh.dispatcher.v1.RedispatchResponse
 */
export class RedispatchResponse extends Message<RedispatchResponse> {
  /**
   * @generated from field: string event_id = 1;
   */
  eventId = "";

  constructor(data?: PartialMessage<RedispatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.dispatcher.v1.RedispatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedispatchResponse {
    return new RedispatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedispatchResponse {
    return new RedispatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedispatchResponse {
    return new RedispatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RedispatchResponse | PlainMessage<RedispatchResponse> | undefined, b: RedispatchResponse | PlainMessage<RedispatchResponse> | undefined): boolean {
    return proto3.util.equals(RedispatchResponse, a, b);
  }
}

