// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file autokitteh/notifications/v1/svc.proto (package autokitteh.notifications.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Notification } from "./notification_pb.js";

/**
 * @generated from message autokitteh.notifications.v1.SendRequest
 */
export class SendRequest extends Message<SendRequest> {
  /**
   * @generated from field: autokitteh.notifications.v1.Notification notification = 1;
   */
  notification?: Notification;

  constructor(data?: PartialMessage<SendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.notifications.v1.SendRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notification", kind: "message", T: Notification },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendRequest {
    return new SendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendRequest {
    return new SendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendRequest {
    return new SendRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendRequest | PlainMessage<SendRequest> | undefined, b: SendRequest | PlainMessage<SendRequest> | undefined): boolean {
    return proto3.util.equals(SendRequest, a, b);
  }
}

/**
 * @generated from message autokitteh.notifications.v1.SendResponse
 */
export class SendResponse extends Message<SendResponse> {
  /**
   * @generated from field: string notification_id = 1;
   */
  notificationId = "";

  constructor(data?: PartialMessage<SendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.notifications.v1.SendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notification_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendResponse {
    return new SendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendResponse {
    return new SendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendResponse {
    return new SendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendResponse | PlainMessage<SendResponse> | undefined, b: SendResponse | PlainMessage<SendResponse> | undefined): boolean {
    return proto3.util.equals(SendResponse, a, b);
  }
}

/**
 * @generated from message autokitteh.notifications.v1.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  /**
   * org or user id.
   *
   * @generated from field: string recipient_id = 1;
   */
  recipientId = "";

  /**
   * optional, if provided, only notifications of this type will be returned.
   *
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: bool unread_only = 3;
   */
  unreadOnly = false;

  /**
   * @generated from field: bool count_only = 4;
   */
  countOnly = false;

  /**
   * if 0, all notifications will be returned.
   *
   * @generated from field: int32 page_size = 5;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.notifications.v1.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recipient_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "unread_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "count_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest {
    return new ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean {
    return proto3.util.equals(ListRequest, a, b);
  }
}

/**
 * @generated from message autokitteh.notifications.v1.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * @generated from field: repeated autokitteh.notifications.v1.Notification notifications = 1;
   */
  notifications: Notification[] = [];

  constructor(data?: PartialMessage<ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.notifications.v1.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notifications", kind: "message", T: Notification, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse {
    return new ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean {
    return proto3.util.equals(ListResponse, a, b);
  }
}

/**
 * @generated from message autokitteh.notifications.v1.MarkAsReadRequest
 */
export class MarkAsReadRequest extends Message<MarkAsReadRequest> {
  /**
   * if empty, all notifications for the recipient will be marked as read.
   *
   * @generated from field: string notification_id = 1;
   */
  notificationId = "";

  constructor(data?: PartialMessage<MarkAsReadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.notifications.v1.MarkAsReadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notification_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarkAsReadRequest {
    return new MarkAsReadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarkAsReadRequest {
    return new MarkAsReadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarkAsReadRequest {
    return new MarkAsReadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MarkAsReadRequest | PlainMessage<MarkAsReadRequest> | undefined, b: MarkAsReadRequest | PlainMessage<MarkAsReadRequest> | undefined): boolean {
    return proto3.util.equals(MarkAsReadRequest, a, b);
  }
}

/**
 * @generated from message autokitteh.notifications.v1.MarkAsReadResponse
 */
export class MarkAsReadResponse extends Message<MarkAsReadResponse> {
  constructor(data?: PartialMessage<MarkAsReadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.notifications.v1.MarkAsReadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarkAsReadResponse {
    return new MarkAsReadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarkAsReadResponse {
    return new MarkAsReadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarkAsReadResponse {
    return new MarkAsReadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MarkAsReadResponse | PlainMessage<MarkAsReadResponse> | undefined, b: MarkAsReadResponse | PlainMessage<MarkAsReadResponse> | undefined): boolean {
    return proto3.util.equals(MarkAsReadResponse, a, b);
  }
}

