// @generated by protoc-gen-connect-es v1.1.4 with parameter "target=ts"
// @generated from file autokitteh/runtimes/v1/svc.proto (package autokitteh.runtimes.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BidiRunRequest, BidiRunResponse, Build1Request, Build1Response, BuildRequest, BuildResponse, DescribeRequest, DescribeResponse, ListRequest, ListResponse, RunRequest, RunResponse } from "./svc_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Runtimes are expected to be registered during deploy (from configuration).
 * Dynamic registration of runtimes will not be supported.
 *
 * @generated from service autokitteh.runtimes.v1.RuntimesService
 */
export const RuntimesService = {
  typeName: "autokitteh.runtimes.v1.RuntimesService",
  methods: {
    /**
     * @generated from rpc autokitteh.runtimes.v1.RuntimesService.Describe
     */
    describe: {
      name: "Describe",
      I: DescribeRequest,
      O: DescribeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc autokitteh.runtimes.v1.RuntimesService.List
     */
    list: {
      name: "List",
      I: ListRequest,
      O: ListResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc autokitteh.runtimes.v1.RuntimesService.Build
     */
    build: {
      name: "Build",
      I: BuildRequest,
      O: BuildResponse,
      kind: MethodKind.Unary,
    },
    /**
     * This is a simplified version that should be used
     * for testing and local runs only.
     *
     * @generated from rpc autokitteh.runtimes.v1.RuntimesService.Run
     */
    run: {
      name: "Run",
      I: RunRequest,
      O: RunResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc autokitteh.runtimes.v1.RuntimesService.BidiRun
     */
    bidiRun: {
      name: "BidiRun",
      I: BidiRunRequest,
      O: BidiRunResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * @generated from rpc autokitteh.runtimes.v1.RuntimesService.Build1
     */
    build1: {
      name: "Build1",
      I: Build1Request,
      O: Build1Response,
      kind: MethodKind.Unary,
    },
  }
} as const;

