// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file autokitteh/runtimes/v1/runtime.proto (package autokitteh.runtimes.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message autokitteh.runtimes.v1.Runtime
 */
export class Runtime extends Message<Runtime> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string file_extensions = 2;
   */
  fileExtensions: string[] = [];

  /**
   * if true, builds are done per file. if false, builds are done per directory.
   *
   * @generated from field: bool filewise_build = 3;
   */
  filewiseBuild = false;

  constructor(data?: PartialMessage<Runtime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.runtimes.v1.Runtime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "file_extensions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "filewise_build", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Runtime {
    return new Runtime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Runtime {
    return new Runtime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Runtime {
    return new Runtime().fromJsonString(jsonString, options);
  }

  static equals(a: Runtime | PlainMessage<Runtime> | undefined, b: Runtime | PlainMessage<Runtime> | undefined): boolean {
    return proto3.util.equals(Runtime, a, b);
  }
}

