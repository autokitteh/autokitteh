// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file autokitteh/policy/v1/svc.proto (package autokitteh.policy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Value } from "@bufbuild/protobuf";

/**
 * @generated from message autokitteh.policy.v1.DecideRequest
 */
export class DecideRequest extends Message<DecideRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string subject_id = 3;
   */
  subjectId = "";

  /**
   * @generated from field: map<string, string> data = 4;
   */
  data: { [key: string]: string } = {};

  constructor(data?: PartialMessage<DecideRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.policy.v1.DecideRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DecideRequest {
    return new DecideRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DecideRequest {
    return new DecideRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DecideRequest {
    return new DecideRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DecideRequest | PlainMessage<DecideRequest> | undefined, b: DecideRequest | PlainMessage<DecideRequest> | undefined): boolean {
    return proto3.util.equals(DecideRequest, a, b);
  }
}

/**
 * @generated from message autokitteh.policy.v1.DecideResponse
 */
export class DecideResponse extends Message<DecideResponse> {
  /**
   * @generated from field: google.protobuf.Value result = 1;
   */
  result?: Value;

  constructor(data?: PartialMessage<DecideResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.policy.v1.DecideResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DecideResponse {
    return new DecideResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DecideResponse {
    return new DecideResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DecideResponse {
    return new DecideResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DecideResponse | PlainMessage<DecideResponse> | undefined, b: DecideResponse | PlainMessage<DecideResponse> | undefined): boolean {
    return proto3.util.equals(DecideResponse, a, b);
  }
}

