# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from autokitteh_pb.oauth.v1 import svc_pb2 as autokitteh_dot_oauth_dot_v1_dot_svc__pb2


class OAuthServiceStub(object):
    """OAuthService is a generic implementation of 3-legged OAuth 2.0 flows,
    reusable by OAuth-based integrations and AutoKitteh user authentication.
    It assumes that the AutoKitteh server has a public address for callbacks,
    which allows callers of this service not to care about this requirement.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/autokitteh.oauth.v1.OAuthService/Get',
                request_serializer=autokitteh_dot_oauth_dot_v1_dot_svc__pb2.GetRequest.SerializeToString,
                response_deserializer=autokitteh_dot_oauth_dot_v1_dot_svc__pb2.GetResponse.FromString,
                )
        self.StartFlow = channel.unary_unary(
                '/autokitteh.oauth.v1.OAuthService/StartFlow',
                request_serializer=autokitteh_dot_oauth_dot_v1_dot_svc__pb2.StartFlowRequest.SerializeToString,
                response_deserializer=autokitteh_dot_oauth_dot_v1_dot_svc__pb2.StartFlowResponse.FromString,
                )
        self.Exchange = channel.unary_unary(
                '/autokitteh.oauth.v1.OAuthService/Exchange',
                request_serializer=autokitteh_dot_oauth_dot_v1_dot_svc__pb2.ExchangeRequest.SerializeToString,
                response_deserializer=autokitteh_dot_oauth_dot_v1_dot_svc__pb2.ExchangeResponse.FromString,
                )


class OAuthServiceServicer(object):
    """OAuthService is a generic implementation of 3-legged OAuth 2.0 flows,
    reusable by OAuth-based integrations and AutoKitteh user authentication.
    It assumes that the AutoKitteh server has a public address for callbacks,
    which allows callers of this service not to care about this requirement.
    """

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartFlow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exchange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OAuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=autokitteh_dot_oauth_dot_v1_dot_svc__pb2.GetRequest.FromString,
                    response_serializer=autokitteh_dot_oauth_dot_v1_dot_svc__pb2.GetResponse.SerializeToString,
            ),
            'StartFlow': grpc.unary_unary_rpc_method_handler(
                    servicer.StartFlow,
                    request_deserializer=autokitteh_dot_oauth_dot_v1_dot_svc__pb2.StartFlowRequest.FromString,
                    response_serializer=autokitteh_dot_oauth_dot_v1_dot_svc__pb2.StartFlowResponse.SerializeToString,
            ),
            'Exchange': grpc.unary_unary_rpc_method_handler(
                    servicer.Exchange,
                    request_deserializer=autokitteh_dot_oauth_dot_v1_dot_svc__pb2.ExchangeRequest.FromString,
                    response_serializer=autokitteh_dot_oauth_dot_v1_dot_svc__pb2.ExchangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'autokitteh.oauth.v1.OAuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OAuthService(object):
    """OAuthService is a generic implementation of 3-legged OAuth 2.0 flows,
    reusable by OAuth-based integrations and AutoKitteh user authentication.
    It assumes that the AutoKitteh server has a public address for callbacks,
    which allows callers of this service not to care about this requirement.
    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autokitteh.oauth.v1.OAuthService/Get',
            autokitteh_dot_oauth_dot_v1_dot_svc__pb2.GetRequest.SerializeToString,
            autokitteh_dot_oauth_dot_v1_dot_svc__pb2.GetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartFlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autokitteh.oauth.v1.OAuthService/StartFlow',
            autokitteh_dot_oauth_dot_v1_dot_svc__pb2.StartFlowRequest.SerializeToString,
            autokitteh_dot_oauth_dot_v1_dot_svc__pb2.StartFlowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Exchange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autokitteh.oauth.v1.OAuthService/Exchange',
            autokitteh_dot_oauth_dot_v1_dot_svc__pb2.ExchangeRequest.SerializeToString,
            autokitteh_dot_oauth_dot_v1_dot_svc__pb2.ExchangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
