// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: autokitteh/envs/v1/svc.proto

package envsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.autokitteh.dev/autokitteh/proto/gen/go/autokitteh/envs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// EnvsServiceName is the fully-qualified name of the EnvsService service.
	EnvsServiceName = "autokitteh.envs.v1.EnvsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnvsServiceListProcedure is the fully-qualified name of the EnvsService's List RPC.
	EnvsServiceListProcedure = "/autokitteh.envs.v1.EnvsService/List"
	// EnvsServiceCreateProcedure is the fully-qualified name of the EnvsService's Create RPC.
	EnvsServiceCreateProcedure = "/autokitteh.envs.v1.EnvsService/Create"
	// EnvsServiceGetProcedure is the fully-qualified name of the EnvsService's Get RPC.
	EnvsServiceGetProcedure = "/autokitteh.envs.v1.EnvsService/Get"
	// EnvsServiceRemoveProcedure is the fully-qualified name of the EnvsService's Remove RPC.
	EnvsServiceRemoveProcedure = "/autokitteh.envs.v1.EnvsService/Remove"
	// EnvsServiceUpdateProcedure is the fully-qualified name of the EnvsService's Update RPC.
	EnvsServiceUpdateProcedure = "/autokitteh.envs.v1.EnvsService/Update"
)

// EnvsServiceClient is a client for the autokitteh.envs.v1.EnvsService service.
type EnvsServiceClient interface {
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Remove(context.Context, *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
}

// NewEnvsServiceClient constructs a client for the autokitteh.envs.v1.EnvsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnvsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnvsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &envsServiceClient{
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+EnvsServiceListProcedure,
			opts...,
		),
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+EnvsServiceCreateProcedure,
			opts...,
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+EnvsServiceGetProcedure,
			opts...,
		),
		remove: connect.NewClient[v1.RemoveRequest, v1.RemoveResponse](
			httpClient,
			baseURL+EnvsServiceRemoveProcedure,
			opts...,
		),
		update: connect.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+EnvsServiceUpdateProcedure,
			opts...,
		),
	}
}

// envsServiceClient implements EnvsServiceClient.
type envsServiceClient struct {
	list   *connect.Client[v1.ListRequest, v1.ListResponse]
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
	remove *connect.Client[v1.RemoveRequest, v1.RemoveResponse]
	update *connect.Client[v1.UpdateRequest, v1.UpdateResponse]
}

// List calls autokitteh.envs.v1.EnvsService.List.
func (c *envsServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Create calls autokitteh.envs.v1.EnvsService.Create.
func (c *envsServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls autokitteh.envs.v1.EnvsService.Get.
func (c *envsServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Remove calls autokitteh.envs.v1.EnvsService.Remove.
func (c *envsServiceClient) Remove(ctx context.Context, req *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error) {
	return c.remove.CallUnary(ctx, req)
}

// Update calls autokitteh.envs.v1.EnvsService.Update.
func (c *envsServiceClient) Update(ctx context.Context, req *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// EnvsServiceHandler is an implementation of the autokitteh.envs.v1.EnvsService service.
type EnvsServiceHandler interface {
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Remove(context.Context, *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
}

// NewEnvsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnvsServiceHandler(svc EnvsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	envsServiceListHandler := connect.NewUnaryHandler(
		EnvsServiceListProcedure,
		svc.List,
		opts...,
	)
	envsServiceCreateHandler := connect.NewUnaryHandler(
		EnvsServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	envsServiceGetHandler := connect.NewUnaryHandler(
		EnvsServiceGetProcedure,
		svc.Get,
		opts...,
	)
	envsServiceRemoveHandler := connect.NewUnaryHandler(
		EnvsServiceRemoveProcedure,
		svc.Remove,
		opts...,
	)
	envsServiceUpdateHandler := connect.NewUnaryHandler(
		EnvsServiceUpdateProcedure,
		svc.Update,
		opts...,
	)
	return "/autokitteh.envs.v1.EnvsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnvsServiceListProcedure:
			envsServiceListHandler.ServeHTTP(w, r)
		case EnvsServiceCreateProcedure:
			envsServiceCreateHandler.ServeHTTP(w, r)
		case EnvsServiceGetProcedure:
			envsServiceGetHandler.ServeHTTP(w, r)
		case EnvsServiceRemoveProcedure:
			envsServiceRemoveHandler.ServeHTTP(w, r)
		case EnvsServiceUpdateProcedure:
			envsServiceUpdateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnvsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnvsServiceHandler struct{}

func (UnimplementedEnvsServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.envs.v1.EnvsService.List is not implemented"))
}

func (UnimplementedEnvsServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.envs.v1.EnvsService.Create is not implemented"))
}

func (UnimplementedEnvsServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.envs.v1.EnvsService.Get is not implemented"))
}

func (UnimplementedEnvsServiceHandler) Remove(context.Context, *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.envs.v1.EnvsService.Remove is not implemented"))
}

func (UnimplementedEnvsServiceHandler) Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.envs.v1.EnvsService.Update is not implemented"))
}
