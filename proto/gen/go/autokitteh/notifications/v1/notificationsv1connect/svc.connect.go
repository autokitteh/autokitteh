// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: autokitteh/notifications/v1/svc.proto

package notificationsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.autokitteh.dev/autokitteh/proto/gen/go/autokitteh/notifications/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// NotificationsServiceName is the fully-qualified name of the NotificationsService service.
	NotificationsServiceName = "autokitteh.notifications.v1.NotificationsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationsServiceSendProcedure is the fully-qualified name of the NotificationsService's Send
	// RPC.
	NotificationsServiceSendProcedure = "/autokitteh.notifications.v1.NotificationsService/Send"
	// NotificationsServiceListProcedure is the fully-qualified name of the NotificationsService's List
	// RPC.
	NotificationsServiceListProcedure = "/autokitteh.notifications.v1.NotificationsService/List"
	// NotificationsServiceMarkAsReadProcedure is the fully-qualified name of the NotificationsService's
	// MarkAsRead RPC.
	NotificationsServiceMarkAsReadProcedure = "/autokitteh.notifications.v1.NotificationsService/MarkAsRead"
)

// NotificationsServiceClient is a client for the autokitteh.notifications.v1.NotificationsService
// service.
type NotificationsServiceClient interface {
	Send(context.Context, *connect.Request[v1.SendRequest]) (*connect.Response[v1.SendResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	MarkAsRead(context.Context, *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error)
}

// NewNotificationsServiceClient constructs a client for the
// autokitteh.notifications.v1.NotificationsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notificationsServiceClient{
		send: connect.NewClient[v1.SendRequest, v1.SendResponse](
			httpClient,
			baseURL+NotificationsServiceSendProcedure,
			opts...,
		),
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+NotificationsServiceListProcedure,
			opts...,
		),
		markAsRead: connect.NewClient[v1.MarkAsReadRequest, v1.MarkAsReadResponse](
			httpClient,
			baseURL+NotificationsServiceMarkAsReadProcedure,
			opts...,
		),
	}
}

// notificationsServiceClient implements NotificationsServiceClient.
type notificationsServiceClient struct {
	send       *connect.Client[v1.SendRequest, v1.SendResponse]
	list       *connect.Client[v1.ListRequest, v1.ListResponse]
	markAsRead *connect.Client[v1.MarkAsReadRequest, v1.MarkAsReadResponse]
}

// Send calls autokitteh.notifications.v1.NotificationsService.Send.
func (c *notificationsServiceClient) Send(ctx context.Context, req *connect.Request[v1.SendRequest]) (*connect.Response[v1.SendResponse], error) {
	return c.send.CallUnary(ctx, req)
}

// List calls autokitteh.notifications.v1.NotificationsService.List.
func (c *notificationsServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// MarkAsRead calls autokitteh.notifications.v1.NotificationsService.MarkAsRead.
func (c *notificationsServiceClient) MarkAsRead(ctx context.Context, req *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error) {
	return c.markAsRead.CallUnary(ctx, req)
}

// NotificationsServiceHandler is an implementation of the
// autokitteh.notifications.v1.NotificationsService service.
type NotificationsServiceHandler interface {
	Send(context.Context, *connect.Request[v1.SendRequest]) (*connect.Response[v1.SendResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	MarkAsRead(context.Context, *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error)
}

// NewNotificationsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationsServiceHandler(svc NotificationsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationsServiceSendHandler := connect.NewUnaryHandler(
		NotificationsServiceSendProcedure,
		svc.Send,
		opts...,
	)
	notificationsServiceListHandler := connect.NewUnaryHandler(
		NotificationsServiceListProcedure,
		svc.List,
		opts...,
	)
	notificationsServiceMarkAsReadHandler := connect.NewUnaryHandler(
		NotificationsServiceMarkAsReadProcedure,
		svc.MarkAsRead,
		opts...,
	)
	return "/autokitteh.notifications.v1.NotificationsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationsServiceSendProcedure:
			notificationsServiceSendHandler.ServeHTTP(w, r)
		case NotificationsServiceListProcedure:
			notificationsServiceListHandler.ServeHTTP(w, r)
		case NotificationsServiceMarkAsReadProcedure:
			notificationsServiceMarkAsReadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationsServiceHandler struct{}

func (UnimplementedNotificationsServiceHandler) Send(context.Context, *connect.Request[v1.SendRequest]) (*connect.Response[v1.SendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.notifications.v1.NotificationsService.Send is not implemented"))
}

func (UnimplementedNotificationsServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.notifications.v1.NotificationsService.List is not implemented"))
}

func (UnimplementedNotificationsServiceHandler) MarkAsRead(context.Context, *connect.Request[v1.MarkAsReadRequest]) (*connect.Response[v1.MarkAsReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.notifications.v1.NotificationsService.MarkAsRead is not implemented"))
}
