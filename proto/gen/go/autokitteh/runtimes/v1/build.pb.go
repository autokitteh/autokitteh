// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: autokitteh/runtimes/v1/build.proto

package runtimesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "go.autokitteh.dev/autokitteh/proto/gen/go/autokitteh/program/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Artifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requirements []*Requirement `protobuf:"bytes,1,rep,name=requirements,proto3" json:"requirements,omitempty"`
	Exports      []*Export      `protobuf:"bytes,2,rep,name=exports,proto3" json:"exports,omitempty"`
	// Runtime specific build output. This essentially the "executable".
	// Map structure for convenience. Intended to use as a filesystem -
	// each entry will be stored as a different file in a persistent store.
	// This means that each key must be a relative path, no '..' or '.' allowed.
	CompiledData map[string][]byte `protobuf:"bytes,3,rep,name=compiled_data,json=compiledData,proto3" json:"compiled_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Artifact) Reset() {
	*x = Artifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autokitteh_runtimes_v1_build_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifact) ProtoMessage() {}

func (x *Artifact) ProtoReflect() protoreflect.Message {
	mi := &file_autokitteh_runtimes_v1_build_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifact.ProtoReflect.Descriptor instead.
func (*Artifact) Descriptor() ([]byte, []int) {
	return file_autokitteh_runtimes_v1_build_proto_rawDescGZIP(), []int{0}
}

func (x *Artifact) GetRequirements() []*Requirement {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *Artifact) GetExports() []*Export {
	if x != nil {
		return x.Exports
	}
	return nil
}

func (x *Artifact) GetCompiledData() map[string][]byte {
	if x != nil {
		return x.CompiledData
	}
	return nil
}

type Requirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *v1.CodeLocation `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"` // where the requirement is coming from.
	Url      string           `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Symbol   string           `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *Requirement) Reset() {
	*x = Requirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autokitteh_runtimes_v1_build_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Requirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Requirement) ProtoMessage() {}

func (x *Requirement) ProtoReflect() protoreflect.Message {
	mi := &file_autokitteh_runtimes_v1_build_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Requirement.ProtoReflect.Descriptor instead.
func (*Requirement) Descriptor() ([]byte, []int) {
	return file_autokitteh_runtimes_v1_build_proto_rawDescGZIP(), []int{1}
}

func (x *Requirement) GetLocation() *v1.CodeLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Requirement) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Requirement) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type Export struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *v1.CodeLocation `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"` // where the export is coming from.
	Symbol   string           `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *Export) Reset() {
	*x = Export{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autokitteh_runtimes_v1_build_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Export) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Export) ProtoMessage() {}

func (x *Export) ProtoReflect() protoreflect.Message {
	mi := &file_autokitteh_runtimes_v1_build_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Export.ProtoReflect.Descriptor instead.
func (*Export) Descriptor() ([]byte, []int) {
	return file_autokitteh_runtimes_v1_build_proto_rawDescGZIP(), []int{2}
}

func (x *Export) GetLocation() *v1.CodeLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Export) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

var File_autokitteh_runtimes_v1_build_proto protoreflect.FileDescriptor

var file_autokitteh_runtimes_v1_build_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x23, 0x61, 0x75,
	0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2,
	0x02, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0xfa, 0xf7, 0x18, 0x08, 0x92, 0x01, 0x05, 0x22,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x0c, 0xfa, 0xf7, 0x18, 0x08, 0x92, 0x01, 0x05, 0x22, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0xfa, 0xf7, 0x18, 0x09, 0x9a, 0x01, 0x06, 0x22, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x3a, 0x64,
	0xfa, 0xf7, 0x18, 0x60, 0x1a, 0x5e, 0x0a, 0x0d, 0x75, 0x72, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20,
	0x75, 0x72, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x20, 0x6d, 0x75,
	0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a,
	0x23, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x75, 0x72, 0x6c, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x27, 0x20,
	0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x20, 0x21,
	0x3d, 0x20, 0x27, 0x27, 0x22, 0x61, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3f,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0xef, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74,
	0x74, 0x65, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x41, 0x52, 0x58, 0xaa, 0x02, 0x16, 0x41, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x16, 0x41, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x5c, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x22, 0x41, 0x75, 0x74, 0x6f,
	0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x5c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x18, 0x41, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x3a, 0x3a, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_autokitteh_runtimes_v1_build_proto_rawDescOnce sync.Once
	file_autokitteh_runtimes_v1_build_proto_rawDescData = file_autokitteh_runtimes_v1_build_proto_rawDesc
)

func file_autokitteh_runtimes_v1_build_proto_rawDescGZIP() []byte {
	file_autokitteh_runtimes_v1_build_proto_rawDescOnce.Do(func() {
		file_autokitteh_runtimes_v1_build_proto_rawDescData = protoimpl.X.CompressGZIP(file_autokitteh_runtimes_v1_build_proto_rawDescData)
	})
	return file_autokitteh_runtimes_v1_build_proto_rawDescData
}

var file_autokitteh_runtimes_v1_build_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_autokitteh_runtimes_v1_build_proto_goTypes = []interface{}{
	(*Artifact)(nil),        // 0: autokitteh.runtimes.v1.Artifact
	(*Requirement)(nil),     // 1: autokitteh.runtimes.v1.Requirement
	(*Export)(nil),          // 2: autokitteh.runtimes.v1.Export
	nil,                     // 3: autokitteh.runtimes.v1.Artifact.CompiledDataEntry
	(*v1.CodeLocation)(nil), // 4: autokitteh.program.v1.CodeLocation
}
var file_autokitteh_runtimes_v1_build_proto_depIdxs = []int32{
	1, // 0: autokitteh.runtimes.v1.Artifact.requirements:type_name -> autokitteh.runtimes.v1.Requirement
	2, // 1: autokitteh.runtimes.v1.Artifact.exports:type_name -> autokitteh.runtimes.v1.Export
	3, // 2: autokitteh.runtimes.v1.Artifact.compiled_data:type_name -> autokitteh.runtimes.v1.Artifact.CompiledDataEntry
	4, // 3: autokitteh.runtimes.v1.Requirement.location:type_name -> autokitteh.program.v1.CodeLocation
	4, // 4: autokitteh.runtimes.v1.Export.location:type_name -> autokitteh.program.v1.CodeLocation
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_autokitteh_runtimes_v1_build_proto_init() }
func file_autokitteh_runtimes_v1_build_proto_init() {
	if File_autokitteh_runtimes_v1_build_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_autokitteh_runtimes_v1_build_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autokitteh_runtimes_v1_build_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Requirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autokitteh_runtimes_v1_build_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Export); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_autokitteh_runtimes_v1_build_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_autokitteh_runtimes_v1_build_proto_goTypes,
		DependencyIndexes: file_autokitteh_runtimes_v1_build_proto_depIdxs,
		MessageInfos:      file_autokitteh_runtimes_v1_build_proto_msgTypes,
	}.Build()
	File_autokitteh_runtimes_v1_build_proto = out.File
	file_autokitteh_runtimes_v1_build_proto_rawDesc = nil
	file_autokitteh_runtimes_v1_build_proto_goTypes = nil
	file_autokitteh_runtimes_v1_build_proto_depIdxs = nil
}
