// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: autokitteh/remote/v1/runner_manager_svc.proto

package remotev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RunnerManagerService_StartRunner_FullMethodName  = "/autokitteh.remote.v1.RunnerManagerService/StartRunner"
	RunnerManagerService_RunnerHealth_FullMethodName = "/autokitteh.remote.v1.RunnerManagerService/RunnerHealth"
	RunnerManagerService_StopRunner_FullMethodName   = "/autokitteh.remote.v1.RunnerManagerService/StopRunner"
	RunnerManagerService_Health_FullMethodName       = "/autokitteh.remote.v1.RunnerManagerService/Health"
)

// RunnerManagerServiceClient is the client API for RunnerManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerManagerServiceClient interface {
	StartRunner(ctx context.Context, in *StartRunnerRequest, opts ...grpc.CallOption) (*StartRunnerResponse, error)
	RunnerHealth(ctx context.Context, in *RunnerHealthRequest, opts ...grpc.CallOption) (*RunnerHealthResponse, error)
	StopRunner(ctx context.Context, in *StopRunnerRequest, opts ...grpc.CallOption) (*StopRunnerResponse, error)
	Health(ctx context.Context, in *RunnerManagerHealthRequest, opts ...grpc.CallOption) (*RunnerManagerHealthResponse, error)
}

type runnerManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerManagerServiceClient(cc grpc.ClientConnInterface) RunnerManagerServiceClient {
	return &runnerManagerServiceClient{cc}
}

func (c *runnerManagerServiceClient) StartRunner(ctx context.Context, in *StartRunnerRequest, opts ...grpc.CallOption) (*StartRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartRunnerResponse)
	err := c.cc.Invoke(ctx, RunnerManagerService_StartRunner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerManagerServiceClient) RunnerHealth(ctx context.Context, in *RunnerHealthRequest, opts ...grpc.CallOption) (*RunnerHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunnerHealthResponse)
	err := c.cc.Invoke(ctx, RunnerManagerService_RunnerHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerManagerServiceClient) StopRunner(ctx context.Context, in *StopRunnerRequest, opts ...grpc.CallOption) (*StopRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopRunnerResponse)
	err := c.cc.Invoke(ctx, RunnerManagerService_StopRunner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerManagerServiceClient) Health(ctx context.Context, in *RunnerManagerHealthRequest, opts ...grpc.CallOption) (*RunnerManagerHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunnerManagerHealthResponse)
	err := c.cc.Invoke(ctx, RunnerManagerService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerManagerServiceServer is the server API for RunnerManagerService service.
// All implementations must embed UnimplementedRunnerManagerServiceServer
// for forward compatibility.
type RunnerManagerServiceServer interface {
	StartRunner(context.Context, *StartRunnerRequest) (*StartRunnerResponse, error)
	RunnerHealth(context.Context, *RunnerHealthRequest) (*RunnerHealthResponse, error)
	StopRunner(context.Context, *StopRunnerRequest) (*StopRunnerResponse, error)
	Health(context.Context, *RunnerManagerHealthRequest) (*RunnerManagerHealthResponse, error)
	mustEmbedUnimplementedRunnerManagerServiceServer()
}

// UnimplementedRunnerManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRunnerManagerServiceServer struct{}

func (UnimplementedRunnerManagerServiceServer) StartRunner(context.Context, *StartRunnerRequest) (*StartRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRunner not implemented")
}
func (UnimplementedRunnerManagerServiceServer) RunnerHealth(context.Context, *RunnerHealthRequest) (*RunnerHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerHealth not implemented")
}
func (UnimplementedRunnerManagerServiceServer) StopRunner(context.Context, *StopRunnerRequest) (*StopRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRunner not implemented")
}
func (UnimplementedRunnerManagerServiceServer) Health(context.Context, *RunnerManagerHealthRequest) (*RunnerManagerHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedRunnerManagerServiceServer) mustEmbedUnimplementedRunnerManagerServiceServer() {}
func (UnimplementedRunnerManagerServiceServer) testEmbeddedByValue()                              {}

// UnsafeRunnerManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerManagerServiceServer will
// result in compilation errors.
type UnsafeRunnerManagerServiceServer interface {
	mustEmbedUnimplementedRunnerManagerServiceServer()
}

func RegisterRunnerManagerServiceServer(s grpc.ServiceRegistrar, srv RunnerManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedRunnerManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RunnerManagerService_ServiceDesc, srv)
}

func _RunnerManagerService_StartRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerManagerServiceServer).StartRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerManagerService_StartRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerManagerServiceServer).StartRunner(ctx, req.(*StartRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerManagerService_RunnerHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerManagerServiceServer).RunnerHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerManagerService_RunnerHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerManagerServiceServer).RunnerHealth(ctx, req.(*RunnerHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerManagerService_StopRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerManagerServiceServer).StopRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerManagerService_StopRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerManagerServiceServer).StopRunner(ctx, req.(*StopRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerManagerService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerManagerHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerManagerServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerManagerService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerManagerServiceServer).Health(ctx, req.(*RunnerManagerHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunnerManagerService_ServiceDesc is the grpc.ServiceDesc for RunnerManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autokitteh.remote.v1.RunnerManagerService",
	HandlerType: (*RunnerManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRunner",
			Handler:    _RunnerManagerService_StartRunner_Handler,
		},
		{
			MethodName: "RunnerHealth",
			Handler:    _RunnerManagerService_RunnerHealth_Handler,
		},
		{
			MethodName: "StopRunner",
			Handler:    _RunnerManagerService_StopRunner_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _RunnerManagerService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "autokitteh/remote/v1/runner_manager_svc.proto",
}
