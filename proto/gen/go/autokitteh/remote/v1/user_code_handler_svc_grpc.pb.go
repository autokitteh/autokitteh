// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: autokitteh/remote/v1/user_code_handler_svc.proto

package remotev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserCodeHandlerService_Activity_FullMethodName          = "/autokitteh.remote.v1.UserCodeHandlerService/Activity"
	UserCodeHandlerService_Done_FullMethodName              = "/autokitteh.remote.v1.UserCodeHandlerService/Done"
	UserCodeHandlerService_Log_FullMethodName               = "/autokitteh.remote.v1.UserCodeHandlerService/Log"
	UserCodeHandlerService_Print_FullMethodName             = "/autokitteh.remote.v1.UserCodeHandlerService/Print"
	UserCodeHandlerService_Sleep_FullMethodName             = "/autokitteh.remote.v1.UserCodeHandlerService/Sleep"
	UserCodeHandlerService_Subscribe_FullMethodName         = "/autokitteh.remote.v1.UserCodeHandlerService/Subscribe"
	UserCodeHandlerService_NextEvent_FullMethodName         = "/autokitteh.remote.v1.UserCodeHandlerService/NextEvent"
	UserCodeHandlerService_Unsubscribe_FullMethodName       = "/autokitteh.remote.v1.UserCodeHandlerService/Unsubscribe"
	UserCodeHandlerService_StartSession_FullMethodName      = "/autokitteh.remote.v1.UserCodeHandlerService/StartSession"
	UserCodeHandlerService_EncodeJWT_FullMethodName         = "/autokitteh.remote.v1.UserCodeHandlerService/EncodeJWT"
	UserCodeHandlerService_RefreshOAuthToken_FullMethodName = "/autokitteh.remote.v1.UserCodeHandlerService/RefreshOAuthToken"
	UserCodeHandlerService_Health_FullMethodName            = "/autokitteh.remote.v1.UserCodeHandlerService/Health"
	UserCodeHandlerService_IsActiveRunner_FullMethodName    = "/autokitteh.remote.v1.UserCodeHandlerService/IsActiveRunner"
)

// UserCodeHandlerServiceClient is the client API for UserCodeHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCodeHandlerServiceClient interface {
	// Runner starting activity
	Activity(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (*ActivityResponse, error)
	// Runner done with activity
	Done(ctx context.Context, in *DoneRequest, opts ...grpc.CallOption) (*DoneResponse, error)
	// Session logs
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	// Print to session log
	Print(ctx context.Context, in *PrintRequest, opts ...grpc.CallOption) (*PrintResponse, error)
	// ak functions
	Sleep(ctx context.Context, in *SleepRequest, opts ...grpc.CallOption) (*SleepResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	NextEvent(ctx context.Context, in *NextEventRequest, opts ...grpc.CallOption) (*NextEventResponse, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
	StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error)
	// Utility functions
	EncodeJWT(ctx context.Context, in *EncodeJWTRequest, opts ...grpc.CallOption) (*EncodeJWTResponse, error)
	RefreshOAuthToken(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	Health(ctx context.Context, in *UserCodeHandlerHealthRequest, opts ...grpc.CallOption) (*UserCodeHandlerHealthResponse, error)
	IsActiveRunner(ctx context.Context, in *IsActiveRunnerRequest, opts ...grpc.CallOption) (*IsActiveRunnerResponse, error)
}

type userCodeHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCodeHandlerServiceClient(cc grpc.ClientConnInterface) UserCodeHandlerServiceClient {
	return &userCodeHandlerServiceClient{cc}
}

func (c *userCodeHandlerServiceClient) Activity(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (*ActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_Activity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeHandlerServiceClient) Done(ctx context.Context, in *DoneRequest, opts ...grpc.CallOption) (*DoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DoneResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_Done_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeHandlerServiceClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_Log_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeHandlerServiceClient) Print(ctx context.Context, in *PrintRequest, opts ...grpc.CallOption) (*PrintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrintResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_Print_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeHandlerServiceClient) Sleep(ctx context.Context, in *SleepRequest, opts ...grpc.CallOption) (*SleepResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SleepResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_Sleep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeHandlerServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeHandlerServiceClient) NextEvent(ctx context.Context, in *NextEventRequest, opts ...grpc.CallOption) (*NextEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextEventResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_NextEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeHandlerServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeHandlerServiceClient) StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartSessionResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_StartSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeHandlerServiceClient) EncodeJWT(ctx context.Context, in *EncodeJWTRequest, opts ...grpc.CallOption) (*EncodeJWTResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncodeJWTResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_EncodeJWT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeHandlerServiceClient) RefreshOAuthToken(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_RefreshOAuthToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeHandlerServiceClient) Health(ctx context.Context, in *UserCodeHandlerHealthRequest, opts ...grpc.CallOption) (*UserCodeHandlerHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCodeHandlerHealthResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeHandlerServiceClient) IsActiveRunner(ctx context.Context, in *IsActiveRunnerRequest, opts ...grpc.CallOption) (*IsActiveRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsActiveRunnerResponse)
	err := c.cc.Invoke(ctx, UserCodeHandlerService_IsActiveRunner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCodeHandlerServiceServer is the server API for UserCodeHandlerService service.
// All implementations must embed UnimplementedUserCodeHandlerServiceServer
// for forward compatibility.
type UserCodeHandlerServiceServer interface {
	// Runner starting activity
	Activity(context.Context, *ActivityRequest) (*ActivityResponse, error)
	// Runner done with activity
	Done(context.Context, *DoneRequest) (*DoneResponse, error)
	// Session logs
	Log(context.Context, *LogRequest) (*LogResponse, error)
	// Print to session log
	Print(context.Context, *PrintRequest) (*PrintResponse, error)
	// ak functions
	Sleep(context.Context, *SleepRequest) (*SleepResponse, error)
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	NextEvent(context.Context, *NextEventRequest) (*NextEventResponse, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error)
	// Utility functions
	EncodeJWT(context.Context, *EncodeJWTRequest) (*EncodeJWTResponse, error)
	RefreshOAuthToken(context.Context, *RefreshRequest) (*RefreshResponse, error)
	Health(context.Context, *UserCodeHandlerHealthRequest) (*UserCodeHandlerHealthResponse, error)
	IsActiveRunner(context.Context, *IsActiveRunnerRequest) (*IsActiveRunnerResponse, error)
	mustEmbedUnimplementedUserCodeHandlerServiceServer()
}

// UnimplementedUserCodeHandlerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserCodeHandlerServiceServer struct{}

func (UnimplementedUserCodeHandlerServiceServer) Activity(context.Context, *ActivityRequest) (*ActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activity not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) Done(context.Context, *DoneRequest) (*DoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Done not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) Log(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) Print(context.Context, *PrintRequest) (*PrintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Print not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) Sleep(context.Context, *SleepRequest) (*SleepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sleep not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) NextEvent(context.Context, *NextEventRequest) (*NextEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextEvent not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) EncodeJWT(context.Context, *EncodeJWTRequest) (*EncodeJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeJWT not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) RefreshOAuthToken(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshOAuthToken not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) Health(context.Context, *UserCodeHandlerHealthRequest) (*UserCodeHandlerHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) IsActiveRunner(context.Context, *IsActiveRunnerRequest) (*IsActiveRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsActiveRunner not implemented")
}
func (UnimplementedUserCodeHandlerServiceServer) mustEmbedUnimplementedUserCodeHandlerServiceServer() {
}
func (UnimplementedUserCodeHandlerServiceServer) testEmbeddedByValue() {}

// UnsafeUserCodeHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCodeHandlerServiceServer will
// result in compilation errors.
type UnsafeUserCodeHandlerServiceServer interface {
	mustEmbedUnimplementedUserCodeHandlerServiceServer()
}

func RegisterUserCodeHandlerServiceServer(s grpc.ServiceRegistrar, srv UserCodeHandlerServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserCodeHandlerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserCodeHandlerService_ServiceDesc, srv)
}

func _UserCodeHandlerService_Activity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).Activity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_Activity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).Activity(ctx, req.(*ActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeHandlerService_Done_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).Done(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_Done_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).Done(ctx, req.(*DoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeHandlerService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeHandlerService_Print_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).Print(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_Print_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).Print(ctx, req.(*PrintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeHandlerService_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SleepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_Sleep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).Sleep(ctx, req.(*SleepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeHandlerService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeHandlerService_NextEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).NextEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_NextEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).NextEvent(ctx, req.(*NextEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeHandlerService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeHandlerService_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_StartSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).StartSession(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeHandlerService_EncodeJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).EncodeJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_EncodeJWT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).EncodeJWT(ctx, req.(*EncodeJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeHandlerService_RefreshOAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).RefreshOAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_RefreshOAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).RefreshOAuthToken(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeHandlerService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCodeHandlerHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).Health(ctx, req.(*UserCodeHandlerHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeHandlerService_IsActiveRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsActiveRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeHandlerServiceServer).IsActiveRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeHandlerService_IsActiveRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeHandlerServiceServer).IsActiveRunner(ctx, req.(*IsActiveRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCodeHandlerService_ServiceDesc is the grpc.ServiceDesc for UserCodeHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCodeHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autokitteh.remote.v1.UserCodeHandlerService",
	HandlerType: (*UserCodeHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Activity",
			Handler:    _UserCodeHandlerService_Activity_Handler,
		},
		{
			MethodName: "Done",
			Handler:    _UserCodeHandlerService_Done_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _UserCodeHandlerService_Log_Handler,
		},
		{
			MethodName: "Print",
			Handler:    _UserCodeHandlerService_Print_Handler,
		},
		{
			MethodName: "Sleep",
			Handler:    _UserCodeHandlerService_Sleep_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _UserCodeHandlerService_Subscribe_Handler,
		},
		{
			MethodName: "NextEvent",
			Handler:    _UserCodeHandlerService_NextEvent_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _UserCodeHandlerService_Unsubscribe_Handler,
		},
		{
			MethodName: "StartSession",
			Handler:    _UserCodeHandlerService_StartSession_Handler,
		},
		{
			MethodName: "EncodeJWT",
			Handler:    _UserCodeHandlerService_EncodeJWT_Handler,
		},
		{
			MethodName: "RefreshOAuthToken",
			Handler:    _UserCodeHandlerService_RefreshOAuthToken_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _UserCodeHandlerService_Health_Handler,
		},
		{
			MethodName: "IsActiveRunner",
			Handler:    _UserCodeHandlerService_IsActiveRunner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "autokitteh/remote/v1/user_code_handler_svc.proto",
}
