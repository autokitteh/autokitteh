// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: autokitteh/remote/v1/user_code_runner_svc.proto

package remotev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserCodeRunnerService_Exports_FullMethodName       = "/autokitteh.remote.v1.UserCodeRunnerService/Exports"
	UserCodeRunnerService_Start_FullMethodName         = "/autokitteh.remote.v1.UserCodeRunnerService/Start"
	UserCodeRunnerService_Execute_FullMethodName       = "/autokitteh.remote.v1.UserCodeRunnerService/Execute"
	UserCodeRunnerService_ActivityReply_FullMethodName = "/autokitteh.remote.v1.UserCodeRunnerService/ActivityReply"
	UserCodeRunnerService_Health_FullMethodName        = "/autokitteh.remote.v1.UserCodeRunnerService/Health"
)

// UserCodeRunnerServiceClient is the client API for UserCodeRunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCodeRunnerServiceClient interface {
	// Get exports
	Exports(ctx context.Context, in *ExportsRequest, opts ...grpc.CallOption) (*ExportsResponse, error)
	// Called at start of session
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	// Execute a function in the runtime (skipped if it's a reply)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	// Reply from activity
	ActivityReply(ctx context.Context, in *ActivityReplyRequest, opts ...grpc.CallOption) (*ActivityReplyResponse, error)
	Health(ctx context.Context, in *UserCodeRunnerHealthRequest, opts ...grpc.CallOption) (*UserCodeRunnerHealthResponse, error)
}

type userCodeRunnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCodeRunnerServiceClient(cc grpc.ClientConnInterface) UserCodeRunnerServiceClient {
	return &userCodeRunnerServiceClient{cc}
}

func (c *userCodeRunnerServiceClient) Exports(ctx context.Context, in *ExportsRequest, opts ...grpc.CallOption) (*ExportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportsResponse)
	err := c.cc.Invoke(ctx, UserCodeRunnerService_Exports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeRunnerServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, UserCodeRunnerService_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeRunnerServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, UserCodeRunnerService_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeRunnerServiceClient) ActivityReply(ctx context.Context, in *ActivityReplyRequest, opts ...grpc.CallOption) (*ActivityReplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityReplyResponse)
	err := c.cc.Invoke(ctx, UserCodeRunnerService_ActivityReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeRunnerServiceClient) Health(ctx context.Context, in *UserCodeRunnerHealthRequest, opts ...grpc.CallOption) (*UserCodeRunnerHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCodeRunnerHealthResponse)
	err := c.cc.Invoke(ctx, UserCodeRunnerService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCodeRunnerServiceServer is the server API for UserCodeRunnerService service.
// All implementations must embed UnimplementedUserCodeRunnerServiceServer
// for forward compatibility.
type UserCodeRunnerServiceServer interface {
	// Get exports
	Exports(context.Context, *ExportsRequest) (*ExportsResponse, error)
	// Called at start of session
	Start(context.Context, *StartRequest) (*StartResponse, error)
	// Execute a function in the runtime (skipped if it's a reply)
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	// Reply from activity
	ActivityReply(context.Context, *ActivityReplyRequest) (*ActivityReplyResponse, error)
	Health(context.Context, *UserCodeRunnerHealthRequest) (*UserCodeRunnerHealthResponse, error)
	mustEmbedUnimplementedUserCodeRunnerServiceServer()
}

// UnimplementedUserCodeRunnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserCodeRunnerServiceServer struct{}

func (UnimplementedUserCodeRunnerServiceServer) Exports(context.Context, *ExportsRequest) (*ExportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exports not implemented")
}
func (UnimplementedUserCodeRunnerServiceServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedUserCodeRunnerServiceServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedUserCodeRunnerServiceServer) ActivityReply(context.Context, *ActivityReplyRequest) (*ActivityReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityReply not implemented")
}
func (UnimplementedUserCodeRunnerServiceServer) Health(context.Context, *UserCodeRunnerHealthRequest) (*UserCodeRunnerHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedUserCodeRunnerServiceServer) mustEmbedUnimplementedUserCodeRunnerServiceServer() {}
func (UnimplementedUserCodeRunnerServiceServer) testEmbeddedByValue()                               {}

// UnsafeUserCodeRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCodeRunnerServiceServer will
// result in compilation errors.
type UnsafeUserCodeRunnerServiceServer interface {
	mustEmbedUnimplementedUserCodeRunnerServiceServer()
}

func RegisterUserCodeRunnerServiceServer(s grpc.ServiceRegistrar, srv UserCodeRunnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserCodeRunnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserCodeRunnerService_ServiceDesc, srv)
}

func _UserCodeRunnerService_Exports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeRunnerServiceServer).Exports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeRunnerService_Exports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeRunnerServiceServer).Exports(ctx, req.(*ExportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeRunnerService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeRunnerServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeRunnerService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeRunnerServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeRunnerService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeRunnerServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeRunnerService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeRunnerServiceServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeRunnerService_ActivityReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeRunnerServiceServer).ActivityReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeRunnerService_ActivityReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeRunnerServiceServer).ActivityReply(ctx, req.(*ActivityReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeRunnerService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCodeRunnerHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeRunnerServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCodeRunnerService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeRunnerServiceServer).Health(ctx, req.(*UserCodeRunnerHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCodeRunnerService_ServiceDesc is the grpc.ServiceDesc for UserCodeRunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCodeRunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autokitteh.remote.v1.UserCodeRunnerService",
	HandlerType: (*UserCodeRunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exports",
			Handler:    _UserCodeRunnerService_Exports_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _UserCodeRunnerService_Start_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _UserCodeRunnerService_Execute_Handler,
		},
		{
			MethodName: "ActivityReply",
			Handler:    _UserCodeRunnerService_ActivityReply_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _UserCodeRunnerService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "autokitteh/remote/v1/user_code_runner_svc.proto",
}
