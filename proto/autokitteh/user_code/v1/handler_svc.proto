syntax = "proto3";

package autokitteh.user_code.v1;

import "autokitteh/user_code/v1/user_code.proto";
import "autokitteh/values/v1/values.proto";
import "google/protobuf/timestamp.proto";

message CallInfo {
  string function = 1;
  repeated autokitteh.values.v1.Value args = 2;
  map<string, autokitteh.values.v1.Value> kwargs = 3;
}

message ActivityRequest {
  string runner_id = 1;
  bytes data = 2;
  // call ID must be deterministic for replays
  CallInfo call_info = 3; // for ak display
}

message ActivityResponse {
  string error = 1;
}

message DoneRequest {
  string runner_id = 1;
  autokitteh.values.v1.Value result = 2;
  string error = 3;
  repeated Frame traceback = 4;
}

message DoneResponse {}

message SleepRequest {
  string runner_id = 1;
  int64 duration_ms = 2;
}

message SleepResponse {
  string error = 1;
}

message SubscribeRequest {
  string runner_id = 1;
  string connection = 2;
  string filter = 3;
}

message SubscribeResponse {
  string signal_id = 1;
  string error = 2;
}

message NextEventRequest {
  string runner_id = 1;
  repeated string signal_ids = 2;
  int64 timeout_ms = 3;
}

message NextEventResponse {
  Event event = 1;
  string error = 3;
}

message UnsubscribeRequest {
  string runner_id = 1;
  string signal_id = 2;
}

message UnsubscribeResponse {
  string error = 1;
}

message Signal {
  string name = 2;
  autokitteh.values.v1.Value payload = 3;
}

message SignalRequest {
  string runner_id = 1;
  Signal signal = 2;
  string session_id = 3;
}

message SignalResponse {
  string error = 1;
}

message NextSignalRequest {
  string runner_id = 1;
  repeated string names = 2;
  int64 timeout_ms = 3;
}

message NextSignalResponse {
  Signal signal = 1;
  string error = 2;
}

message LogRequest {
  string runner_id = 1;
  string level = 2;
  string message = 3;
}

message LogResponse {
  string error = 1;
}

message PrintRequest {
  string runner_id = 1;
  string message = 2;
}

message PrintResponse {
  string error = 1;
}

message StartSessionRequest {
  string runner_id = 1;
  string loc = 2;
  bytes data = 3;
  bytes memo = 4;
}

message StartSessionResponse {
  string session_id = 1;
  string error = 2;
}
message EncodeJWTRequest {
  string runner_id = 1;
  map<string, int64> payload = 2;
  string connection = 3;
  string algorithm = 4;
}

message EncodeJWTResponse {
  string jwt = 1;
  string error = 2;
}

message RefreshRequest {
  string runner_id = 1;
  string integration = 2;
  string connection = 3;
}

message RefreshResponse {
  string token = 1;
  google.protobuf.Timestamp expires = 2;
  string error = 3;
}

message IsActiveRunnerRequest {
  string runner_id = 1;
}

message IsActiveRunnerResponse {
  bool is_active = 1;
  string error = 2;
}

message HandlerHealthRequest {}

message HandlerHealthResponse {
  string error = 1;
}

message ExecuteReplyRequest {
  string runner_id = 1;
  autokitteh.values.v1.Value result = 2;
  string error = 3;
  repeated autokitteh.user_code.v1.Frame traceback = 4;
}

message ExecuteReplyResponse {
  string error = 1;
}

service HandlerService {
  // Runner starting activity
  rpc Activity(ActivityRequest) returns (ActivityResponse) {}

  // Runner result from execute
  rpc ExecuteReply(ExecuteReplyRequest) returns (ExecuteReplyResponse) {}

  // Runner done with activity
  rpc Done(DoneRequest) returns (DoneResponse) {}
  // Session logs
  rpc Log(LogRequest) returns (LogResponse) {}
  // Print to session log
  rpc Print(PrintRequest) returns (PrintResponse) {}

  // ak functions
  rpc Sleep(SleepRequest) returns (SleepResponse) {}
  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse) {}
  rpc NextEvent(NextEventRequest) returns (NextEventResponse) {}
  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse) {}
  rpc StartSession(StartSessionRequest) returns (StartSessionResponse) {}
  rpc Signal(SignalRequest) returns (SignalResponse) {}
  rpc NextSignal(NextSignalRequest) returns (NextSignalResponse) {}

  // Utility functions
  rpc EncodeJWT(EncodeJWTRequest) returns (EncodeJWTResponse) {}
  rpc RefreshOAuthToken(RefreshRequest) returns (RefreshResponse) {}
  rpc Health(HandlerHealthRequest) returns (HandlerHealthResponse) {}
  rpc IsActiveRunner(IsActiveRunnerRequest) returns (IsActiveRunnerResponse) {}
}
