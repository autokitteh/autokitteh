syntax = "proto3";

package autokitteh.deployments.v1;

import "autokitteh/deployments/v1/deployment.proto";
import "buf/validate/validate.proto";

message CreateRequest {
  option (buf.validate.message).cel = {
    id: "deployment.deployment_id_must_be_empty"
    message: "deployment_id must not be specified"
    expression: "has(this.deployment) && this.deployment.deployment_id == ''"
  };
  option (buf.validate.message).cel = {
    id: "deployment.deployment_state_must_be_unspecified"
    message: "deployment_state must not be specified"
    expression: "has(this.deployment) && this.deployment.state == 0"
  };

  // deployment.state must be 0 or inactive.
  Deployment deployment = 1 [(buf.validate.field).required = true];
}

message CreateResponse {
  string deployment_id = 1 [(buf.validate.field).string.min_len = 1];
}

message ActivateRequest {
  string deployment_id = 1 [(buf.validate.field).string.min_len = 1];
}

message ActivateResponse {}

message DeactivateRequest {
  string deployment_id = 1 [(buf.validate.field).string.min_len = 1];
}

message DeactivateResponse {}

message TestRequest {
  string deployment_id = 1 [(buf.validate.field).string.min_len = 1];
}

message TestResponse {}

message ListRequest {
  string project_id = 1;
  string build_id = 2;
  DeploymentState state = 3 [(buf.validate.field).enum.defined_only = true];
  uint32 limit = 4;
  bool include_session_stats = 5;
  string org_id = 6;

  // TODO: FieldMask.
  // TODO: Paging.
}

message ListResponse {
  // Chronological order: the last element is the latest.
  repeated Deployment deployments = 1 [(buf.validate.field).repeated.items.required = true];
}

message GetRequest {
  string deployment_id = 1 [(buf.validate.field).string.min_len = 1];
}

message GetResponse {
  Deployment deployment = 1;
}

message DeleteRequest {
  string deployment_id = 1 [(buf.validate.field).string.min_len = 1];
}

message DeleteResponse {}

service DeploymentsService {
  rpc Create(CreateRequest) returns (CreateResponse);

  // Activate a deployment, automatically drains all others.
  rpc Activate(ActivateRequest) returns (ActivateResponse);

  // Deactivate a deployment. If deployment has any active sessions,
  // deployment will be drained first.
  rpc Deactivate(DeactivateRequest) returns (DeactivateResponse);

  rpc Test(TestRequest) returns (TestResponse);

  rpc List(ListRequest) returns (ListResponse);

  rpc Get(GetRequest) returns (GetResponse);

  rpc Delete(DeleteRequest) returns (DeleteResponse);
}
