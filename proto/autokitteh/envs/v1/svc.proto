syntax = "proto3";

package autokitteh.envs.v1;

import "autokitteh/envs/v1/env.proto";
import "buf/validate/validate.proto";

message ListRequest {
  string project_id = 1;
}

message ListResponse {
  // Returns only envs that directly reside under the specified project.
  repeated Env envs = 1 [(buf.validate.field).repeated.items.required = true];

  // TODO: add field_mask.
}

message CreateRequest {
  option (buf.validate.message).cel = {
    id: "env.env_id_must_be_empty"
    message: "env_id must not be specified"
    expression: "has(this.env) && this.env.env_id == ''"
  };
  option (buf.validate.message).cel = {
    id: "env.name_required"
    message: "name must be specified"
    expression: "has(this.env) && this.env.name != ''"
  };

  Env env = 1 [(buf.validate.field).required = true];
}

message CreateResponse {
  string env_id = 1 [(buf.validate.field).string.min_len = 1];
}

message GetRequest {
  option (buf.validate.message).cel = {
    id: "env_id_xor_name"
    message: "env_id and name are mutually exclusive"
    expression: "(this.env_id == '' && this.name != '') || (this.env_id != '' && this.name == '')"
  };

  string env_id = 1;
  string name = 2;
  string project_id = 3; // relevant only when name != ""
}

message GetResponse {
  Env env = 1;
}

message RemoveRequest {
  string env_id = 1 [(buf.validate.field).string.min_len = 1];
}

message RemoveResponse {}

message UpdateRequest {
  option (buf.validate.message).cel = {
    id: "env.env_id_must_be_empty"
    message: "env_id must not be specified"
    expression: "has(this.env) && this.env.env_id == ''"
  };
  option (buf.validate.message).cel = {
    id: "env.project_id_required"
    message: "project_id must be specified"
    expression: "has(this.env) && this.env.project_id != ''"
  };

  Env env = 1 [(buf.validate.field).required = true];
}

message UpdateResponse {}

service EnvsService {
  rpc List(ListRequest) returns (ListResponse);

  rpc Create(CreateRequest) returns (CreateResponse);

  rpc Get(GetRequest) returns (GetResponse);

  rpc Remove(RemoveRequest) returns (RemoveResponse);

  rpc Update(UpdateRequest) returns (UpdateResponse);
}
